version: ${project.version}

replicaCount: 1

ingress:
    enabled: true
    host: portal
    port: 20000
    className: ""
    annotations: {}
    defaultRule: enabled

service:
    type: ClusterIP
    ports:
        - name: portal-gateway
          port: 20000

podSecurityContext:
    enabled: false

resources:
    requests:
        memory: "200Mi"
    limits:
        memory: "500Mi"

initContainers:
    init-portal-iam:
        image: busybox:1.33
        command:
            - "sh"
            - "-c"
            - "while ! wget --quiet --server-response --spider http://portal-iam:8080/auth/realms/portal; do sleep 1; done"

containers:
    portal-gateway:
        image:
            registry: ${docker.pull.registry}
            baseName: ${project.groupId}
            name: portal-gateway
            tag: ${project.version}
            pullPolicy: IfNotPresent
        containerSecurityContext:
            enabled: false
        ports:
            - name: http
              port: 20000
        resources: {}
        env:
              # HTTP protocol for external access
            - name: "PORTAL_GATEWAY_PUBLIC_PROTOCOL"
              value: "http"
              # HTTP host name for external access
            - name: "PORTAL_GATEWAY_PUBLIC_HOSTNAME"
              value: "portal.minikube"
              # HTTP port for external access, must be the same as the exposed port
            - name: "PORTAL_GATEWAY_PUBLIC_PORT"
              value: "80"
              # IAM
            - name: "PORTAL_GATEWAY_PORTAL_IAM_HOST"
              value: "portal-iam"
            - name: "PORTAL_GATEWAY_PORTAL_IAM_PORT"
              value: "8080"
              # PORTAL_GATEWAY_BASE_HOST is the hostname for accessing Base microservice via HTTP
            - name: "PORTAL_GATEWAY_BASE_HOST"
              value: "base"
              # PORTAL_GATEWAY_BASE_PORT is the port for accessing the Base microservice via HTTP
            - name: "PORTAL_GATEWAY_BASE_PORT"
              value: "20010"
              # PORTAL_GATEWAY_DASHBOARD_HOST is the hostname for accessing Dashboard microservice via HTTP
            - name: "PORTAL_GATEWAY_DASHBOARD_HOST"
              value: "dashboard"
              # PORTAL_GATEWAY_DASHBOARD_PORT is the port for accessing Dashboard microservice via HTTP
            - name: "PORTAL_GATEWAY_DASHBOARD_PORT"
              value: "20020"
              # PORTAL_GATEWAY_ORGANISATION_HOST is the hostname for accessing Organisation microservice via HTTP
            - name: "PORTAL_GATEWAY_ORGANISATION_HOST"
              value: "organisation"
              # PORTAL_GATEWAY_ORGANISATION_PORT is the port for accessing Organisation microservice via HTTP
            - name: "PORTAL_GATEWAY_ORGANISATION_PORT"
              value: "20030"
              # PORTAL_GATEWAY_DOCUMENT_HOST is the hostname for accessing Document microservice via HTTP
            - name: "PORTAL_GATEWAY_DOCUMENT_HOST"
              value: "document"
              # PORTAL_GATEWAY_DOCUMENT_PORT is the port for accessing Document microservice via HTTP
            - name: "PORTAL_GATEWAY_DOCUMENT_PORT"
              value: "20050"
              # PORTAL_GATEWAY_FILESTORAGE_HOST is the hostname for accessing FileStorage microservice via HTTP
            - name: "PORTAL_GATEWAY_FILESTORAGE_HOST"
              value: "filestorage"
              # PORTAL_GATEWAY_FILESTORAGE_PORT is the port for accessing FileStorage microservice via HTTP
            - name: "PORTAL_GATEWAY_FILESTORAGE_PORT"
              value: "20090"
        storages: []
        livenessProbe:
            enabled: true
            httpGet:
                path: /health
                port: http
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
        readinessProbe:
            enabled: true
            httpGet:
                path: /health
                port: http
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
        startupProbe:
            enabled: true
            httpGet:
                path: /health
                port: http
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
