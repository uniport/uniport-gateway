global:
  image:
    registry: "${docker.registry}"

version: ${project.version}

ingress:
  enabled: true
  host: portal
  port: 20000
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "balanced"
    nginx.ingress.kubernetes.io/session-cookie-name: "INGRESSCOOKIE"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
  defaultRule: enabled

services:
  uniport-gateway-headless:
    headless: true
    ports:
      hazelcast:
        port: 5701
  uniport-gateway:
    type: ClusterIP
    ports:
      http:
        port: 20000
      metrics:
        port: 9090

pod:
  type: StatefulSet
  serviceName: uniport-gateway-headless
  replicas: 2
  securityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

strategy:
  type: RollingUpdate

initContainers:
  init-portal-iam:
    image:
      name: busybox
      tag: 1.35
    command:
      - "sh"
      - "-c"
      - "while ! wget --quiet --server-response --spider http://portal-iam:8080/auth/realms/portal; do sleep 1; done"

containers:
  uniport-gateway:
    image:
      baseName: ${project.groupId}
      name: uniport-gateway
      tag: ${project.version}
      pullPolicy: IfNotPresent
    securityContext:
      enabled: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    ports:
      http:
        port: 20000
    resources:
      requests:
        cpu: "40m"
        memory: "256Mi"
      limits:
        memory: "512Mi"
    env:
      # Hostname for proxying alertmanager
      ALERTMANAGER_HOST:
        value: alertmanager-operated.monitoring.svc.cluster.local
      # Port for proxying the alertmanager
      ALERTMANAGER_PORT:
        value: "9093"
      # Hostname for the jaeger ui
      JAEGER_HOST:
        value: tempo.monitoring.svc.cluster.local
      # Port for the jaeger-ui
      JAEGER_PORT:
        value: "16686"
      # Hostname for proxying prometheus
      PROMETHEUS_HOST:
        value: prometheus-operated.monitoring.svc.cluster.local
      # Hostname for proxying prometheus
      PROMETHEUS_PORT:
        value: "9090"
      # UNIPORT_GATEWAY_PUBLIC_PROTOCOL HTTP protocol for external access
      UNIPORT_GATEWAY_PUBLIC_PROTOCOL:
        value: "http"
      # UNIPORT_GATEWAY_PUBLIC_HOSTNAME HTTP host name for external access
      UNIPORT_GATEWAY_PUBLIC_HOSTNAME:
        value: "portal.minikube"
      # UNIPORT_GATEWAY_PUBLIC_PORT HTTP port for external access, must be the same as the exposed port
      UNIPORT_GATEWAY_PUBLIC_PORT:
        value: "80"
      # UNIPORT_GATEWAY_LOG_LEVEL is the overall log level and can be one of TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF
      UNIPORT_GATEWAY_LOG_LEVEL:
        value: "INFO"
      # UNIPORT_GATEWAY_LOGGING_CONFIG is the location of the custom logback configuration file
      UNIPORT_GATEWAY_LOGGING_CONFIG:
        value: "/etc/uniport-gateway/logging-config/logback-structured.xml"
      # UNIPORT_GATEWAY_CLUSTERED is the switch to run the uniport-gateway in standalone or cluster mode
      UNIPORT_GATEWAY_CLUSTERED:
        value: "true"
      UNIPORT_GATEWAY_HEADLESS_SERVICE_NAME:
        value: "uniport-gateway-headless.minikube.svc.cluster.local"
      UNIPORT_GATEWAY_INSTANCE_NAME:
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      # UNIPORT_GATEWAY_PORTAL_IAM_HOST is the hostname of the portal-iam
      UNIPORT_GATEWAY_PORTAL_IAM_HOST:
        value: "portal-iam"
      # UNIPORT_GATEWAY_PORTAL_IAM_PORT is the port of the portal-iam host
      UNIPORT_GATEWAY_PORTAL_IAM_PORT:
        value: "8080"
      # UNIPORT_GATEWAY_BASE_HOST is the hostname for accessing Base microservice via HTTP
      UNIPORT_GATEWAY_BASE_HOST:
        value: "base"
      # UNIPORT_GATEWAY_BASE_PORT is the port for accessing the Base microservice via HTTP
      UNIPORT_GATEWAY_BASE_PORT:
        value: "20010"
      # UNIPORT_GATEWAY_DASHBOARD_HOST is the hostname for accessing Dashboard microservice via HTTP
      UNIPORT_GATEWAY_DASHBOARD_HOST:
        value: "dashboard"
      # UNIPORT_GATEWAY_DASHBOARD_PORT is the port for accessing Dashboard microservice via HTTP
      UNIPORT_GATEWAY_DASHBOARD_PORT:
        value: "20020"
      # UNIPORT_GATEWAY_ORGANISATION_HOST is the hostname for accessing Organisation microservice via HTTP
      UNIPORT_GATEWAY_ORGANISATION_HOST:
        value: "organisation"
      # UNIPORT_GATEWAY_ORGANISATION_PORT is the port for accessing Organisation microservice via HTTP
      UNIPORT_GATEWAY_ORGANISATION_PORT:
        value: "20030"
      # UNIPORT_GATEWAY_FILESTORAGE_HOST is the hostname for accessing FileStorage microservice via HTTP
      UNIPORT_GATEWAY_FILESTORAGE_HOST:
        value: "filestorage"
      # UNIPORT_GATEWAY_FILESTORAGE_PORT is the port for accessing FileStorage microservice via HTTP
      UNIPORT_GATEWAY_FILESTORAGE_PORT:
        value: "20090"
      # UNIPORT_GATEWAY_CONTENT_HOST is the hostname for accessing Content microservice via HTTP
      UNIPORT_GATEWAY_CONTENT_HOST:
        value: "content"
      # UNIPORT_GATEWAY_CONTENT_PORT is the port for accessing Content microservice via HTTP
      UNIPORT_GATEWAY_CONTENT_PORT:
        value: "20110"
      # UNIPORT_GATEWAY_CONVERSATION_HOST is the hostname for accessing Conversation microservice via HTTP
      UNIPORT_GATEWAY_CONVERSATION_HOST:
        value: "conversation"
      # UNIPORT_GATEWAY_CONVERSATION_PORT is the port for accessing Conversation microservice via HTTP
      UNIPORT_GATEWAY_CONVERSATION_PORT:
        value: "20120"
      # UNIPORT_GATEWAY_NOTIFICATION_HOST is the hostname for accessing Notification microservice via HTTP
      UNIPORT_GATEWAY_NOTIFICATION_HOST:
        value: "notification"
      # UNIPORT_GATEWAY_NOTIFICATION_PORT is the port for accessing Notification microservice via HTTP
      UNIPORT_GATEWAY_NOTIFICATION_PORT:
        value: "20060"
      # UNIPORT_GATEWAY_PORTAL_KAFKA_UI_HOST is the hostname for accessing Portal-Kafka-UI via HTTP
      UNIPORT_GATEWAY_PORTAL_KAFKA_UI_HOST:
        value: "portal-kafka-ui"
      # UNIPORT_GATEWAY_PORTAL_KAFKA_UI_PORT is the port for accessing Portal-Kafka-UI via HTTP
      UNIPORT_GATEWAY_PORTAL_KAFKA_UI_PORT:
        value: "80"
      # UNIPORT_GATEWAY_PORTAL_PGWEB_HOST is the hostname for accessing the pgweb web gui via HTTP
      UNIPORT_GATEWAY_PORTAL_PGWEB_HOST:
        value: pgweb
      # UNIPORT_GATEWAY_PORTAL_PGWEB_PORT is the port for accessing the pgweb web gui via HTTP
      UNIPORT_GATEWAY_PORTAL_PGWEB_PORT:
        value: "80"
      # UNIPORT_GATEWAY_PORTAL_GRAFANA_HOST is the hostname for accessing Grafana via HTTP
      UNIPORT_GATEWAY_PORTAL_GRAFANA_HOST:
        value: "grafana-grafana-operator-grafana-service.monitoring.svc.cluster.local"
      # UNIPORT_GATEWAY_PORTAL_GRAFANA_PORT is the port for accessing Grafana via HTTP
      UNIPORT_GATEWAY_PORTAL_GRAFANA_PORT:
        value: "3000"
      # UNIPORT_GATEWAY_BEARER_TOKEN_PUBLIC_KEY describes the path or url to the public key. this is required to verify the signature of incoming jwts.
      UNIPORT_GATEWAY_BEARER_TOKEN_PUBLIC_KEY:
        value: "http://portal-iam:8080/auth/realms/portal"
      # UNIPORT_GATEWAY_BEARER_TOKEN_ISSUER the issuer expected in the access token
      UNIPORT_GATEWAY_BEARER_TOKEN_ISSUER:
        value: "http://portal.minikube/auth/realms/portal"
      # UNIPORT_GATEWAY_BEARER_TOKEN_OPTIONAL dictates if the proxy should expect (and therefore verify) an access token
      UNIPORT_GATEWAY_BEARER_TOKEN_OPTIONAL:
        value: "false"
      # UNIPORT_GATEWAY_METRICS_PORT is the port of the metrics endpoint
      UNIPORT_GATEWAY_METRICS_PORT:
        value: "9090"
      # UNIPORT_GATEWAY_METRICS_PATH is the path of the metrics endpoint
      UNIPORT_GATEWAY_METRICS_PATH:
        value: "/metrics"
      # OTEL_SERVICE_NAME is the name of the service
      OTEL_SERVICE_NAME:
        value: "uniport-gateway"
      # OTEL_TRACES_EXPORTER is the list of exporters used for tracing, separated by commas
      OTEL_TRACES_EXPORTER:
        value: "none"
      # OTEL_METRICS_EXPORTER is the list of exporters user for metrics, separated by commas
      OTEL_METRICS_EXPORTER:
        value: "none"
      UNIPORT_GATEWAY_ANALYTICS_HOST:
        value: analytics
      UNIPORT_GATEWAY_ANALYTICS_PORT:
        value: "80"
      # ID of the oauth/oidc client to be used in this gateway instance.
      UNIPORT_GATEWAY_CLIENT_ID:
        valueFrom:
          secretKeyRef:
            name: gateway-oauth-config
            key: client-id
      # Client secret of the oauth/oidc client to be used in this gateway instance.
      UNIPORT_GATEWAY_CLIENT_SECRET:
        valueFrom:
          secretKeyRef:
            name: gateway-oauth-config
            key: client-secret
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      timeoutSeconds: 1
      periodSeconds: 20
      failureThreshold: 6
      successThreshold: 1
    readinessProbe:
      enabled: true
      httpGet:
        path: /readiness
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
      periodSeconds: 20
      failureThreshold: 6
      successThreshold: 1
    startupProbe:
      enabled: true
      httpGet:
        path: /readiness
        port: http
      initialDelaySeconds: 10
      timeoutSeconds: 1
      periodSeconds: 20
      failureThreshold: 12
      successThreshold: 1
    storages:
      tmp:
        type: emptyDir
        mountPath: /tmp
        readOnly: false
      file-upload-storage:
        type: emptyDir
        mountPath: /app/file-uploads
      logging-config:
        type: configMap
        configMapName: uniport-gateway-logging-config
        # As mounting a configMap creates a dir and mounts the config map's data as files in it
        # and there are existing files in /etc/uniport-gateway, an additional path `logging-config` is used
        mountPath: /etc/uniport-gateway/logging-config
        readOnly: true

serviceAccount:
  automountServiceAccountToken: "false"
  imagePullSecrets:
    inventage-nexus:
      name: inventage-nexus-registry

# Configure service monitor installation.
serviceMonitor:
  # Disabled by default, requires presence of the prometheus CRDs.
  enabled: false
  endpoints:
    - port: metrics
      interval: 15s

configMaps:
  uniport-gateway-logging-config:
    enabled: true
    data:
      logback-structured.xml:
        valueFromFile: app-config/logback-structured.xml
      logback-unstructured.xml:
        valueFromFile: app-config/logback-unstructured.xml
