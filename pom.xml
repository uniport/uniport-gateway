<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>ch.uniport.gateway</groupId>
    <artifactId>reactor</artifactId>
    <version>10.1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>config-schemas</module>
        <module>helm</module>
        <module>server</module>
        <module>docs</module>
    </modules>

    <distributionManagement>
        <repository>
            <id>inventage-portal-group</id>
            <url>https://nexus3.inventage.com/repository/inventage-portal-maven-staging/</url>
        </repository>
    </distributionManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.release>21</maven.compiler.release>

        <!--
            fabric8io/docker-maven-plugin configuration
            @see https://dmp.fabric8.io/
        -->
        <docker.image.name>${project.groupId}.${project.artifactId}:${project.version}</docker.image.name>
        <docker.contextDir>${project.build.directory}/docker-context</docker.contextDir>
        <docker.registry>uniportcr.artifacts.inventage.com</docker.registry>
        <docker.verbose>true</docker.verbose>
        <!-- Allow overriding XML config with docker.* properties -->
        <docker.imagePropertyConfiguration>override</docker.imagePropertyConfiguration>
        <!--
            If this is empty, the normal docker build command will be used.
            When set, the docker maven plugin uses buildx to build to all platforms.
            We automatically set this in the multi-arch profile, but this can also
            be set explicitly, e.g. with -Ddocker.platforms=linux/amd64,linux/arm64
        -->
        <docker.platforms/>

        <docker-java.version>3.5.3</docker-java.version>
        <junit-jupiter.version>5.13.4</junit-jupiter.version>

        <nexus3.helm.registry.push.url>https://nexus3.inventage.com/repository</nexus3.helm.registry.push.url>
        <nexus3.helm.repository.push.id>inventage-portal-helm-staging</nexus3.helm.repository.push.id>

        <portal-helm-dependencies.repository>oci://uniportcr.artifacts.inventage.com/charts</portal-helm-dependencies.repository>

        <portal-helm-chart-library.version>6.0.0-202504090952-418-d491e48</portal-helm-chart-library.version>
        <portal-code-style-settings.version>1.8.0-202508061627-173-3706bdb</portal-code-style-settings.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Project dependencies -->
            <dependency>
                <groupId>com.inventage.portal</groupId>
                <artifactId>code-style-settings</artifactId>
                <version>${portal-code-style-settings.version}</version>
                <type>zip</type>
            </dependency>
            <dependency>
                <groupId>com.inventage.portal.helm-chart-library</groupId>
                <artifactId>helm</artifactId>
                <version>${portal-helm-chart-library.version}</version>
            </dependency>

            <!-- Vertx-->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-stack-depchain</artifactId>
                <version>4.5.16</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- logging facade -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>2.0.17</version>
            </dependency>
            <!-- logging backend -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.5.18</version>
            </dependency>
            <!-- structural logging -->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>8.1</version>
            </dependency>
            <!-- contextual logging (like MDC) -->
            <dependency>
                <groupId>io.reactiverse</groupId>
                <artifactId>reactiverse-contextual-logging</artifactId>
                <version>1.2.1</version>
            </dependency>
            <!-- required by jaxb-api -->
            <dependency>
                <groupId>com.sun.xml.bind</groupId>
                <artifactId>jaxb-impl</artifactId>
                <version>4.0.5</version>
            </dependency>
            <!-- for substituting variables in config via StringSubstitutor.replace -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>1.14.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>4.5.0</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.jaxrs</groupId>
                <artifactId>jackson-jaxrs-json-provider</artifactId>
                <version>2.19.2</version>
            </dependency>
            <!-- for generating gateway model pojos -->
            <dependency>
                <groupId>org.immutables</groupId>
                <artifactId>value</artifactId>
                <version>2.11.3</version>
            </dependency>
            <!-- for JWT path traversal -->
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path</artifactId>
                <version>2.9.0</version>
            </dependency>
            <!-- required by json-path -->
            <dependency>
                <groupId>net.minidev</groupId>
                <artifactId>json-smart</artifactId>
                <version>2.5.2</version>
            </dependency>
            <!-- for connecting to a docker daemon in the docker config provider -->
            <dependency>
                <groupId>com.github.docker-java</groupId>
                <artifactId>docker-java-core</artifactId>
                <version>${docker-java.version}</version>
            </dependency>
            <!-- required by docker-java-core -->
            <dependency>
                <groupId>com.github.docker-java</groupId>
                <artifactId>docker-java-transport-httpclient5</artifactId>
                <version>${docker-java.version}</version>
            </dependency>
            <!-- OpenTelemetry BOM -->
            <dependency>
                <groupId>io.opentelemetry</groupId>
                <artifactId>opentelemetry-bom</artifactId>
                <version>1.53.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Metrics Prometheus -->
            <!-- has to be in sync with vertx-micrometer-metrics micrometer version (see
            https://mvnrepository.com/artifact/io.vertx/vertx-micrometer-metrics/4.5.14) -->
            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-prometheus</artifactId>
                <version>1.12.13</version>
            </dependency>

            <!-- test -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-params</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- for JWT creation -->
            <dependency>
                <groupId>io.smallrye</groupId>
                <artifactId>smallrye-jwt-build</artifactId>
                <version>4.6.2</version>
                <scope>test</scope>
            </dependency>
            <!-- for configuring smallrye-jwt-build -->
            <dependency>
                <groupId>io.smallrye.config</groupId>
                <artifactId>smallrye-config</artifactId>
                <version>3.13.4</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>jakarta.json</groupId>
                <artifactId>jakarta.json-api</artifactId>
                <version>2.1.3</version>
                <scope>test</scope>
            </dependency>
            <!-- required by jakarta.json-api -->
            <dependency>
                <groupId>org.eclipse.parsson</groupId>
                <artifactId>parsson</artifactId>
                <version>1.1.7</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>3.27.4</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- must be added as a server to ~/.m2/settings.xml -->
    <repositories>
        <repository>
            <id>inventage-portal-group</id>
            <name>Inventage Portal Solution</name>
            <url>https://nexus3.inventage.com/repository/inventage-portal-maven-group/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>inventage-portal-group</id>
            <name>Inventage Portal Solution</name>
            <url>https://nexus3.inventage.com/repository/inventage-portal-maven-group/</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.6.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.4.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.3.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.14.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.1.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.6.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.5.3</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.5.1</version>
                </plugin>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.46.0</version>
                    <configuration>
                        <images>
                            <image>
                                <name>${docker.registry}/${docker.image.name}</name>
                                <build>
                                    <tags>
                                        <tag>latest</tag>
                                        <tag>${project.version}</tag>
                                    </tags>
                                    <filter>false</filter>
                                    <buildx>
                                        <!--
                                            @see https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md
                                            @see https://github.com/docker/buildx/blob/master/docs/guides/custom-registry-config.md
                                        -->
                                        <!--suppress UnresolvedMavenProperty -->
                                        <configFile>${maven.multiModuleProjectDirectory}/.build-tools/buildkit/buildkitd.toml</configFile>
                                        <!--
                                            Plugin will ignore the entire buildx section, if platforms are empty
                                            @see https://github.com/fabric8io/docker-maven-plugin/issues/1623#issuecomment-1437942740
                                        -->
                                        <platforms>${docker.platforms}</platforms>
                                    </buildx>
                                </build>
                            </image>
                        </images>
                    </configuration>
                    <executions>
                        <!-- build image -->
                        <execution>
                            <id>build-image</id>
                            <goals>
                                <goal>build</goal>
                            </goals>
                            <phase>install</phase>
                        </execution>
                        <!-- tag image -->
                        <execution>
                            <id>tag-image</id>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <phase>install</phase>
                        </execution>
                        <!-- push image -->
                        <execution>
                            <id>push-image</id>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <phase>deploy</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <!-- See https://github.com/kokuwaio/helm-maven-plugin for documentation -->
                    <groupId>io.kokuwa.maven</groupId>
                    <artifactId>helm-maven-plugin</artifactId>
                    <version>6.17.0</version>
                    <extensions>true</extensions>
                    <configuration>
                        <chartVersion>${project.version}</chartVersion>
                        <chartDirectory>${project.basedir}/helm/target/uniport-gateway</chartDirectory>
                        <useLocalHelmBinary>false</useLocalHelmBinary>
                        <debug>true</debug>
                        <uploadRepoSnapshot>
                            <name>inventage-portal-group</name>
                            <url>uniportcr.artifacts.inventage.com/charts</url>
                        </uploadRepoSnapshot>
                        <uploadRepoStable>
                            <name>inventage-portal-group</name>
                            <url>uniportcr.artifacts.inventage.com/charts</url>
                        </uploadRepoStable>
                    </configuration>
                    <executions>
                        <execution>
                            <id>default-upload</id>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <phase>deploy</phase>
                            <configuration>
                                <skipUpload>true</skipUpload>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Code Coverage report generation -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.13</version>
                    <executions>
                        <execution>
                            <id>default-prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                            <phase>process-test-sources</phase>
                        </execution>
                        <execution>
                            <id>default-report</id>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <phase>test</phase>
                            <configuration>
                                <dataFile>${project.build.directory}/jacoco.exec</dataFile>
                                <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.github.spotbugs</groupId>
                    <artifactId>spotbugs-maven-plugin</artifactId>
                    <version>4.9.3.2</version>
                    <configuration>
                        <xmlOutput>true</xmlOutput>
                        <excludeFilterFiles>
                            <excludeFilterFile>${maven.multiModuleProjectDirectory}/.code-style-settings/spotbugs/exclude.xml</excludeFilterFile>
                            <excludeFilterFile>${maven.multiModuleProjectDirectory}/.code-style-settings/spotbugs/exclude-specific.xml</excludeFilterFile>
                        </excludeFilterFiles>
                    </configuration>
                </plugin>
                <!-- For SBOM Generation -->
                <plugin>
                    <groupId>org.cyclonedx</groupId>
                    <artifactId>cyclonedx-maven-plugin</artifactId>
                    <version>2.9.1</version>
                </plugin>
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>1.15.1</version>
                </plugin>
                <plugin>
                    <groupId>com.diffplug.spotless</groupId>
                    <artifactId>spotless-maven-plugin</artifactId>
                    <version>2.46.1</version>
                </plugin>
                <plugin>
                    <groupId>com.rudikershaw.gitbuildhook</groupId>
                    <artifactId>git-build-hook-maven-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.18.0</version>
                </plugin>
                <plugin>
                    <groupId>io.github.mfoo</groupId>
                    <artifactId>libyear-maven-plugin</artifactId>
                    <version>1.2.0</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.9.2,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${maven.compiler.release}</version>
                                </requireJavaVersion>
                                <banDuplicatePomDependencyVersions/>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- remove code-style-settings first to delete not anymore present files in the download -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <executions>
                    <execution>
                        <id>remove-code-style-settings</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <phase>clean</phase>
                        <inherited>false</inherited>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>${project.basedir}/.code-style-settings</directory>
                                    <excludes>
                                        <exclude>spotbugs/exclude-specific.xml</exclude>
                                        <exclude>checkstyle/suppressions-specific.xml</exclude>
                                    </excludes>
                                </fileset>
                                <fileset>
                                    <directory>${project.basedir}/.vscode</directory>
                                    <includes>
                                        <include>settings.json</include>
                                    </includes>
                                </fileset>
                                <fileset>
                                    <directory>${project.basedir}/.idea</directory>
                                    <includes>
                                        <include>checkstyle-idea.xml</include>
                                        <include>eclipseCodeFormatter.xml</include>
                                        <include>prettier.xml</include>
                                        <include>codeStyles/**/*</include>
                                        <include>jsLinters/**/*</include>
                                    </includes>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- download shared code style -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-zip</id>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <inherited>false</inherited>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.inventage.portal</groupId>
                                    <artifactId>code-style-settings</artifactId>
                                    <type>zip</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${project.basedir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- For SBOM Generation -->
            <plugin>
                <groupId>org.cyclonedx</groupId>
                <artifactId>cyclonedx-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>makeAggregateBom</goal>
                        </goals>
                        <phase>install</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- For consistent formatting -->
            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <inherited>false</inherited>
                <!-- See https://github.com/diffplug/spotless/tree/maven/2.35.0/plugin-maven -->
                <configuration>
                    <!-- limit format enforcement to just the files changed by this feature branch -->
                    <ratchetFrom>origin/main</ratchetFrom>
                    <formats>
                        <!-- you can define as many formats as you want, each is independent -->
                        <format>
                            <includes>
                                <include>**/*.md</include>
                                <include>.gitignore</include>
                                <include>.jenkins/Jenkinsfile.build</include>
                            </includes>
                            <excludes>
                                <exclude>**/frontend/**/*</exclude>
                            </excludes>

                            <trimTrailingWhitespace/>
                            <endWithNewline/>
                            <indent>
                                <spaces>true</spaces>
                                <spacesPerTab>4</spacesPerTab>
                            </indent>
                        </format>
                    </formats>
                    <java>
                        <includes>
                            <include>**/src/main/java/**/*.java</include>
                            <include>**/src/test/java/**/*.java</include>
                        </includes>

                        <importOrder/>
                        <removeUnusedImports/>

                        <eclipse>
                            <file>${maven.multiModuleProjectDirectory}/.code-style-settings/portal-java-formatter.xml</file>
                        </eclipse>
                    </java>
                    <pom>
                        <includes>
                            <include>**/pom.xml</include>
                        </includes>
                        <sortPom>
                            <nrOfIndentSpace>4</nrOfIndentSpace>
                            <expandEmptyElements>false</expandEmptyElements>
                        </sortPom>
                    </pom>
                    <json>
                        <includes>
                            <include>**/*.json</include>
                        </includes>
                        <excludes>
                            <exclude>**/package.json</exclude>
                            <exclude>**/frontend/**/*</exclude>
                            <exclude>**/config-schemas/**/dynamic.json</exclude>
                            <exclude>**/config-schemas/**/static.json</exclude>
                            <exclude>**/config-schemas/**/uniportGatewayDynamicSchema.json</exclude>
                            <exclude>**/config-schemas/**/uniportGatewayStaticSchema.json</exclude>
                            <exclude>**/helm-maven-plugin/**/*</exclude>
                            <exclude>**/.docker/**/*</exclude>
                        </excludes>
                        <gson>
                            <version>2.8.1</version>
                            <indentSpaces>4</indentSpaces>
                            <sortByKeys>false</sortByKeys>
                        </gson>
                    </json>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>apply</goal>
                        </goals>
                        <phase>process-sources</phase>
                    </execution>
                </executions>
            </plugin>
            <!--
                    For checkstyle reports
                    @see http://maven.apache.org/plugins/maven-checkstyle-plugin/index.html
                -->
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <consoleOutput>true</consoleOutput>
                    <configLocation>${maven.multiModuleProjectDirectory}/.code-style-settings/checkstyle/config.xml</configLocation>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <!-- Keep same version as used by the IntelliJ plugin, see IntelliJ IDEA > Preferences > Tools > Checkstyle -->
                        <version>10.26.1</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>com.rudikershaw.gitbuildhook</groupId>
                <artifactId>git-build-hook-maven-plugin</artifactId>
                <inherited>false</inherited>
                <configuration>
                    <installHooks>
                        <pre-commit>.code-style-settings/hooks/pre-commit</pre-commit>
                        <pre-push>.code-style-settings/hooks/pre-push</pre-push>
                    </installHooks>
                </configuration>
                <executions>
                    <execution>
                        <id>git-hook-install</id>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--automatically update: mvn versions:update-properties versions:use-latest-versions -N -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <configuration>
                    <ignoredVersions>(?i).*[-.](alpha|beta|m|rc|cr)([-.]?\d+)?</ignoredVersions>
                    <processDependencyManagement>false</processDependencyManagement>
                    <processPluginDependenciesInPluginManagement>false</processPluginDependenciesInPluginManagement>
                </configuration>
                <executions>
                    <execution>
                        <id>display-updates</id>
                        <goals>
                            <goal>display-property-updates</goal>
                            <goal>display-dependency-updates</goal>
                            <goal>display-plugin-updates</goal>
                        </goals>
                        <phase>process-sources</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- calculate libyears (https://libyear.com/): mvn io.github.mfoo:libyear-maven-plugin:analyze -->
            <plugin>
                <groupId>io.github.mfoo</groupId>
                <artifactId>libyear-maven-plugin</artifactId>
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <id>libyear-analysis</id>
                        <goals>
                            <goal>analyze</goal>
                        </goals>
                        <phase>process-sources</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <property>
                    <name>!env.CI</name>
                </property>
            </activation>
            <properties>
                <!-- Don't update helm repositories to speedup build -->
                <helm.skipRefresh>true</helm.skipRefresh>
            </properties>
        </profile>
        <profile>
            <id>ci</id>
            <activation>
                <property>
                    <name>env.CI</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.rudikershaw.gitbuildhook</groupId>
                        <artifactId>git-build-hook-maven-plugin</artifactId>
                        <executions>
                            <!-- Disable the execution -->
                            <execution>
                                <id>git-hook-install</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>versions-maven-plugin</artifactId>
                        <executions>
                            <!-- Disable the execution -->
                            <execution>
                                <id>display-updates</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.github.mfoo</groupId>
                        <artifactId>libyear-maven-plugin</artifactId>
                        <executions>
                            <!-- Disable the execution -->
                            <execution>
                                <id>libyear-analysis</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>multi-arch</id>
            <activation>
                <property>
                    <name>multiArchBuild</name>
                </property>
            </activation>
            <properties>
                <docker.platforms>linux/amd64,linux/arm64</docker.platforms>
            </properties>
        </profile>
        <profile>
            <id>public</id>
            <activation>
                <property>
                    <name>public</name>
                </property>
            </activation>
            <properties>
                <docker.registry>docker.io</docker.registry>
            </properties>
            <build>
                <!-- disable download of private dependencies -->
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>remove-code-style-settings</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack-zip</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
