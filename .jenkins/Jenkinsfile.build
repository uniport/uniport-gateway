pipeline {
    agent {
        node {
            label 'java11'
        }
    }

    triggers {
        // every sunday between 3am and 5am (https://www.jenkins.io/doc/book/pipeline/syntax/)
        cron(env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'main' ? 'H H(3-5) * * 7' : '')
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '20'))
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
        skipDefaultCheckout()
    }

    parameters {
        string(defaultValue: 'master', description: 'Branch name filter to push docker images', name: 'BRANCH_FILTER')
        booleanParam(defaultValue: true, description: 'Push docker images', name: 'PUSH_DOCKER_IMAGES')
        booleanParam(defaultValue: true, description: 'Deploy this build to DEV', name: 'DEPLOY_DEV')
    }

    environment {
        LINE_SEPARATOR = '================================================================================'
        IQ_SERVER_CREDENTIALS_ID = 'portal-registry-creds'
        NEXUS2_CREDS = credentials('inventage-ierp')
        CI_NEXUS2_BITBUCKET_CREDS = credentials('inventage-portal')
        CI_REGISTRY_CREDS = credentials('portal-registry-creds')
    }

    tools {
        maven 'maven-release-latest'
        jdk 'Open-JDK-11'
    }

    stages {
        stage('Initialize') {
            steps {
                checkout([
                        $class           : 'GitSCM',
                        branches         : scm.branches,
                        extensions       : scm.extensions + [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: scm.userRemoteConfigs
                ])

                // Change the snapshot version in all pom.xml files to a release candidate version
                updateVersion()

                // Set environment variables from pom.xml
                setPackageEnvironmentVariables()

                // Update build information in Jenkins
                script {
                    currentBuild.displayName = "Build: #${env.BUILD_NUMBER}"
                    currentBuild.description = "Version: ${env.PACKAGE_VERSION}"
                }

                // Display important environment variables
                sh '''
                    set +x
                    echo "Environment variables:"

                    echo $LINE_SEPARATOR
                    echo "PACKAGE_VERSION = $PACKAGE_VERSION"
                    echo "PACKAGE_GROUP_ID = $PACKAGE_GROUP_ID"
                    echo "PACKAGE_ARTIFACT_ID = $PACKAGE_ARTIFACT_ID"
                    echo "DOCKER_PULL_REGISTRY = $DOCKER_PULL_REGISTRY"
                    echo "DOCKER_PUSH_REGISTRY = $DOCKER_PUSH_REGISTRY"
                    echo "PROMOTION_TAG = $PROMOTION_TAG"
                    echo "PROMOTION_REPO_NAME = $PROMOTION_REPO_NAME"
                    echo $LINE_SEPARATOR
                '''
            }
        }
        stage('Build') {
            // Use the local docker host for building the container image
            environment {
                DOCKER_HOST = 'unix:///var/run/docker.sock'
            }

            steps {
                sh 'mvn help:system'

                mvn(
                        settings: '.jenkins/settings.xml',
                        profiles: '!local',
                        properties: [
                                'java.io.tmpdir': WORKSPACE,
                                'multiArchBuild': true
                        ],
                        'clean',
                        'deploy'
                )

                withDockerRegistry(credentialsId: 'portal-registry-creds', url: "https://${DOCKER_PULL_REGISTRY}") {
                    script {
                        env.STAGING_REPOSITORY_ID = util.stagingRepositoryId('./target/nexus-staging/staging/2784e0aacf5060.properties')
                    }
                }
            }
        }

        stage('Analysis') {
            steps {
                parallel(
                        'Test Evaluation': {
                            junit testResults: '**/target/surefire-reports/TEST-*.xml'
                        },
                        'IQ Evaluation': {
                            iqEvaluation('inventage-portal-gateway', 'build', '**/target/bom.xml')
                        },
                        'Code Quality': {
                            codeQualityEvaluation()
                        }
                )
            }
        }

        stage('Deployment DEV') {
            when {
                branch params.BRANCH_FILTER
                expression { params.PUSH_DOCKER_IMAGES && params.DEPLOY_DEV }
            }
            steps {
                lock('uniport-portal-gateway-deployment-dev') {
                    withCredentials([file(credentialsId: 'ips-digitalocean-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                            set +x
                            echo "Downloading service.sh"

                            curl -X GET \
                                -u "$CI_NEXUS2_BITBUCKET_CREDS_USR:$CI_NEXUS2_BITBUCKET_CREDS_PSW" \
                                https://git.inventage.com/projects/PORTAL/repos/portal-infrastructure/raw/kubernetes/microservices/service.sh?at=refs%2Ftags%2F1.0.0 \
                                > service.sh

                            KUBECONFIG=$KUBECONFIG_FILE bash service.sh portal-gateway install ips dev

                            rm -f service.sh
                        '''
                    }
                }
            }
        }

        stage('Tag Staging Repository') {
            steps {
                echo "Create Nexus3 Tag: ${env.PROMOTION_TAG}"
                createTag nexusInstanceId: 'nexus3.inventage.com', tagName: "${env.PROMOTION_TAG}"
                associateTag nexusInstanceId: 'nexus3.inventage.com', search: [[key: 'repository', value: 'inventage-portal-docker-staging'], [key: 'version', value: "${env.PACKAGE_VERSION}*"]], tagName: "${env.PROMOTION_TAG}"
            }
        }

        stage('Trigger Release Pipeline') {
            steps {
                build job: 'Inventage Portal/Portal Gateway/RegisterCandidate', wait: false, parameters: [
                        string(name: 'nexus2StagingRepositoryId', value: "${env.STAGING_REPOSITORY_ID}"),
                        string(name: 'nexus3TagName', value: "${env.PROMOTION_TAG}")
                ]
            }
        }
    }

    post {
        always {
            sendNotifications()
        }
    }
}

/**
 * Returns the "version suffix"  variable. The format is `yyyyMMddhhmm-${JENKINS_BUILD_NUMBER}-${GIT_COMMIT_HASH}`
 *
 * @return
 */
def getVersionSuffix() {
    def separator = '-'
    def now = sh(script: 'date -u +%Y%m%d%H%M', returnStdout: true).trim()
    def gitCommitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

    return now + separator + "${env.BUILD_NUMBER}" + separator + gitCommitHash
}

/**
 * Sets the appropriate version in `pom.xml`.
 */
void updateVersion() {
    env.VERSION_SUFFIX = getVersionSuffix()
    sh('mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.\\${parsedVersion.incrementalVersion}-${VERSION_SUFFIX} -DoldVersion=* -DgroupId=* -DartifactId=* -DgenerateBackupPoms=false')
}

/**
 * Sets important values defined in reactor pom.xml as environment variables.
 */
void setPackageEnvironmentVariables() {
    // @see https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readmavenpom-read-a-maven-project-file
    // @see http://maven.apache.org/components/ref/3.3.9/maven-model/apidocs/org/apache/maven/model/Model.html
    def pom = readMavenPom file: 'pom.xml'

    env.PACKAGE_VERSION = pom.version
    env.PACKAGE_GROUP_ID = pom.groupId
    env.PACKAGE_ARTIFACT_ID = pom.artifactId
    env.DOCKER_PULL_REGISTRY = pom.properties['docker.pull.registry']
    env.DOCKER_PUSH_REGISTRY = pom.properties['docker.push.registry']
    env.PROMOTION_TAG = "${env.PACKAGE_GROUP_ID}_${env.PACKAGE_VERSION}"
    env.PROMOTION_REPO_NAME = pom.properties['docker.promotion.repository.name']
}

def mvn(Map options = [:], CharSequence... goals) {
    util.mvn(options, goals)
}

def iqEvaluation(application, stage, String... scanPatterns) {
    def patterns = []
    for (String scanPattern : scanPatterns) {
        patterns.add([scanPattern: scanPattern])
    }

    nexusPolicyEvaluation failBuildOnNetworkError: false, iqApplication: application, iqScanPatterns: patterns, iqStage: stage, jobCredentialsId: "${env.IQ_SERVER_CREDENTIALS_ID}"
}

/**
 * Using Warnings Next Generation Plugin
 *
 * @link https://www.jenkins.io/doc/pipeline/steps/warnings-ng/
 * @link https://github.com/jenkinsci/warnings-ng-plugin/tree/master/doc
 *
 * @return
 */
def codeQualityEvaluation() {
    mvn(
            settings: '.jenkins/settings.xml',
            profiles: '!local',
            properties: [
                    'java.io.tmpdir': WORKSPACE
            ],
            'spotless:check checkstyle:check spotbugs:check'
    )

    recordIssues(
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    mavenConsole(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            healthy: 1,
            unhealthy: 10,
            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    java(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            healthy: 1,
            unhealthy: 10,
            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    checkStyle(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            qualityGates: [
                    [threshold: 1, type: 'TOTAL_NORMAL', unstable: true],
                    [threshold: 1, type: 'TOTAL_HIGH', unstable: true],
            ],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    spotBugs(reportEncoding: 'UTF-8', useRankAsPriority: true)
            ]
    )

    recordIssues(
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    taskScanner(includePattern: '**/*.java', normalTags: 'TODO,FIXME')
            ]
    )
}

/**
 * Sends notifications about the build status.
 *
 * @return
 */
def sendNotifications() {
    configFileProvider([configFile(fileId: 'default-email-recipients', variable: 'DEFAULT_EMAIL_RECIPIENTS_FILE')]) {
        def recipient = sh(script: "git show -s --format='%ae'", returnStdout: true, encoding: 'UTF-8').trim()
        if (!recipient) {
            recipient = sh(script: "cat '${env.DEFAULT_EMAIL_RECIPIENTS_FILE}'", returnStdout: true, encoding: 'UTF-8').trim()
        }

        step([
                $class                  : 'Mailer',
                notifyEveryUnstableBuild: true,
                recipients              : recipient
        ])
    }
}
