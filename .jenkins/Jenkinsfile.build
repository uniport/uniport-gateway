library identifier: 'portal-jenkinsfile-library@0.2.0', retriever: modernSCM([
    $class: 'GitSCMSource', remote: 'git@github.com:uniport/jenkinsfile-library.git',
])

pipeline {
    agent {
        node {
            label 'java17 && docker && !northport'
        }
    }

    triggers {
        // every sunday between 3am and 5am (https://www.jenkins.io/doc/book/pipeline/syntax/)
        cron(env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'main' ? 'H H(3-5) * * 7' : '')
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '20'))
        timeout(time: 360, unit: 'MINUTES')
        ansiColor('xterm')
        skipDefaultCheckout()
    }

    parameters {
        string(defaultValue: 'master', description: 'Branch name filter to push docker images', name: 'BRANCH_FILTER')
        booleanParam(defaultValue: true, description: 'Deploy this build to DEV', name: 'DEPLOY_DEV')
        booleanParam(defaultValue: true, description: 'Register this build version in the archetype-inventage-portal-solution', name: 'REGISTER_VERSION_WITH_ARCHETYPE')
    }

    environment {
        LINE_SEPARATOR = '================================================================================'
        IQ_SERVER_CREDENTIALS_ID = 'portal-registry-creds'
        CI_NEXUS2_BITBUCKET_CREDS = credentials('inventage-portal')
        CI_REGISTRY_CREDS = credentials('portal-registry-creds')
        CI_JENKINS_TOKEN = credentials('jenkins-inventage-portal')

        // Contains the credentials & remotes for the helm repositories
        HELM_REPOSITORY_CONFIG = "${env.WORKSPACE}/helm-repositories.yaml"
    }

    tools {
        maven 'maven-release-latest'
        jdk 'OpenJDK-17'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    Map checkoutCfg = checkout([
                        $class           : 'GitSCM',
                        branches         : scm.branches,
                        extensions       : scm.extensions + [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
                    env.GIT_URL = checkoutCfg.GIT_URL
                    env.GIT_BRANCH_NAME = checkoutCfg.GIT_BRANCH
                    echo "--> Building from remote: ${env.GIT_URL} on branch ${env.GIT_BRANCH_NAME}"
                }

                // Change the snapshot version in all pom.xml files to a release candidate version
                updateVersion()

                // Set environment variables from pom.xml
                setPackageEnvironmentVariables()

                // Update build information in Jenkins
                script {
                    currentBuild.displayName = "Build: #${env.BUILD_NUMBER}"
                    currentBuild.description = "Version: ${env.PACKAGE_VERSION}"
                }

                // Display important environment variables
                sh("env | sort")

                addHelmRepositories("inventage-portal")
            }
        }

        stage('Build') {
            // Use the local docker host for building the container image
            environment {
                DOCKER_HOST = 'unix:///var/run/docker.sock'
            }

            steps {
                sh 'mvn help:system'

                withDockerRegistry(credentialsId: 'portal-registry-creds', url: "https://${DOCKER_REGISTRY}") {
                    mvn(
                        settings: '.jenkins/settings.xml',
                        profiles: 'jenkins,!local',
                        properties: [
                            'java.io.tmpdir': WORKSPACE,
                            'multiArchBuild': true
                        ],
                        'clean',
                        'deploy'
                    )
                }
            }
        }

        stage('Analysis') {
            steps {
                parallel(
                        'Test Evaluation': {
                            junit testResults: '**/target/surefire-reports/TEST-*.xml'
                        },
                        'IQ Evaluation': {
                            iqEvaluation('inventage-portal-gateway', 'build', '**/target/bom.xml')
                        },
                        'Code Quality': {
                            codeQualityEvaluation()
                        },
                        'Generated Code Check': {
                            script {
                                def git_status_output = sh(returnStdout: true, script: "git status --porcelain --untracked-files=no").trim()
                                git_status_output.readLines().each { line ->
                                    echo "${line}"
                                    if (!(line ==~ '.*pom\\.xml$')) {
                                        echo "${git_status_output}"
                                        sh("git diff")
                                        error("You have uncommited generated code!")
                                    }
                                }
                            }
                        }
                )
            }
        }

        stage('Deployment DEV') {
            when {
                branch params.BRANCH_FILTER
                expression { params.DEPLOY_DEV }
            }
            steps {
                configureDevDeployment(
                    version: "${env.PACKAGE_VERSION}",
                    servicename: "gateway"
                )
            }
        }

        stage('Register Version with Archetype') {
            when {
                branch params.BRANCH_FILTER
                expression { params.REGISTER_VERSION_WITH_ARCHETYPE }
            }
            steps {
                registerVersionWithArchetype(
                    component: "portal-gateway",
                    version: "${env.PACKAGE_VERSION}",
                    action: "snapshot"
                )
            }
        }

        stage('Tag Staging Repository') {
            steps {
                // Container Images
                echo "Create Nexus3 Tag: ${env.PROMOTION_TAG_DOCKER}"
                createTag nexusInstanceId: 'nexus3.inventage.com', tagName: "${env.PROMOTION_TAG_DOCKER}"
                associateTag nexusInstanceId: 'nexus3.inventage.com', search: [[key: 'repository', value: 'inventage-portal-docker-staging'], [key: 'version', value: "${env.PACKAGE_VERSION}*"]], tagName: "${env.PROMOTION_TAG_DOCKER}"

                // Helm Charts
                echo "Create Nexus3 Tag: ${env.PROMOTION_TAG_HELM}"
                createTag nexusInstanceId: 'nexus3.inventage.com', tagName: "${env.PROMOTION_TAG_HELM}"
                associateTag nexusInstanceId: 'nexus3.inventage.com', search: [[key: 'repository', value: 'inventage-portal-helm-staging'], [key: 'version', value: "${env.PACKAGE_VERSION}"]], tagName: "${env.PROMOTION_TAG_HELM}"

                // Maven
                echo "Create Nexus3 Tag: ${env.PROMOTION_TAG_MVN}"
                createTag nexusInstanceId: 'nexus3.inventage.com', tagName: "${env.PROMOTION_TAG_MVN}"
                associateTag nexusInstanceId: 'nexus3.inventage.com', search: [[key: 'repository', value: 'inventage-portal-maven-staging'], [key: 'version', value: "${env.PACKAGE_VERSION}"]], tagName: "${env.PROMOTION_TAG_MVN}"
            }
        }

        stage('Register Release Link') {
            steps {
                script {
                    def params = [
                        "GIT_RELEASE_BRANCH_NAME": "${env.GIT_BRANCH_NAME}",
                        "NOTIFICATIONS_RECIPIENT": "${env.NOTIFICATIONS_RECIPIENT}",
                        "PROMOTION_TAG": "${env.PROMOTION_TAG}",
                        "PROMOTION_TAG_HELM": "${env.PROMOTION_TAG_HELM}",
                        "PROMOTION_TAG_DOCKER": "${env.PROMOTION_TAG_DOCKER}",
                        "PROMOTION_TAG_NPM": "",
                        "PROMOTION_TAG_MVN": "${env.PROMOTION_TAG_MVN}",
                        "PACKAGE_VERSION": "${env.PACKAGE_VERSION}",
                        "STAGING_REPOSITORY_ID": "${env.STAGING_REPOSITORY_ID}",
                        "UPSTREAM_BUILD_URL": "${env.BUILD_URL}"
                    ]

                    String releaseJobUrl = releaseJobUrl(
                            jobUrl: "${env.JOB_URL}",
                            authToken: "${env.CI_JENKINS_TOKEN}",
                            queryParams: params
                    )

                    currentBuild.description = currentBuild.description + "<br /><a href=\"${releaseJobUrl}\" target=\"_blank\">Release</a>"
                }
            }
        }
    }

    post {
        always {
            configFileProvider([configFile(fileId: 'default-email-recipients', variable: 'DEFAULT_EMAIL_RECIPIENTS')]) {
                script {
                    portal.sendNotifications(DEFAULT_EMAIL_RECIPIENTS)
                }
            }
        }
    }
}

/**
 * Sets the appropriate version in `pom.xml`.
 */
void updateVersion() {
    String versionSuffix = portal.getVersionSuffix()
    portal.updateVersion(versionSuffix)
}

/**
 * Sets important values defined in reactor pom.xml as environment variables.
 */
void setPackageEnvironmentVariables() {
    // @see https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readmavenpom-read-a-maven-project-file
    // @see http://maven.apache.org/components/ref/3.3.9/maven-model/apidocs/org/apache/maven/model/Model.html
    def pom = readMavenPom file: 'pom.xml'

    env.PACKAGE_VERSION = pom.version
    env.PACKAGE_GROUP_ID = pom.groupId
    env.PACKAGE_ARTIFACT_ID = pom.artifactId
    env.DOCKER_REGISTRY = pom.properties['docker.registry']
    env.PROMOTION_TAG = "${env.PACKAGE_GROUP_ID}_${env.PACKAGE_VERSION}"
    env.PROMOTION_TAG_DOCKER = "${env.PROMOTION_TAG}_docker"
    env.PROMOTION_TAG_HELM = "${env.PROMOTION_TAG}_helm"
    env.PROMOTION_TAG_MVN = "${env.PROMOTION_TAG}_mvn"
    env.PROMOTION_TAG_NPM = "${env.PROMOTION_TAG}_npm"
    env.PROMOTION_REPO_NAME = pom.properties['docker.promotion.repository.name']
}

def mvn(Map options = [:], CharSequence... goals) {
    util.mvn(options, goals)
}

def iqEvaluation(application, stage, String... scanPatterns) {
    def patterns = []
    for (String scanPattern : scanPatterns) {
        patterns.add([scanPattern: scanPattern])
    }

    nexusPolicyEvaluation failBuildOnNetworkError: false, iqApplication: application, iqScanPatterns: patterns, iqStage: stage, jobCredentialsId: "${env.IQ_SERVER_CREDENTIALS_ID}"
}

/**
 * Using Warnings Next Generation Plugin
 *
 * @link https://www.jenkins.io/doc/pipeline/steps/warnings-ng/
 * @link https://github.com/jenkinsci/warnings-ng-plugin/tree/master/doc
 *
 * @return
 */
def codeQualityEvaluation() {
    mvn(
            settings: '.jenkins/settings.xml',
            profiles: '!local',
            properties: [
                    'java.io.tmpdir': WORKSPACE
            ],
            'spotless:check checkstyle:check spotbugs:check'
    )

    recordIssues(
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    mavenConsole(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            healthy: 1,
            unhealthy: 10,
            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    java(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            healthy: 1,
            unhealthy: 10,
            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    checkStyle(reportEncoding: 'UTF-8')
            ]
    )

    recordIssues(
            qualityGates: [
                    [threshold: 1, type: 'TOTAL_NORMAL', unstable: true],
                    [threshold: 1, type: 'TOTAL_HIGH', unstable: true],
            ],
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    spotBugs(reportEncoding: 'UTF-8', useRankAsPriority: true)
            ]
    )

    recordIssues(
            sourceCodeEncoding: 'UTF-8',
            tools: [
                    taskScanner(includePattern: '**/*.java', normalTags: 'TODO,FIXME')
            ]
    )
}

def addHelmRepositories(String credentialsId) {
    // The names `inventage-portal-helm` & `inventage-portal-helm-staging` are referenced in scripts - be cautious when
    // changing these names!

    withCredentials([usernamePassword(credentialsId: "${credentialsId}", passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
        sh("helm repo add inventage-portal-helm https://nexus3.inventage.com/repository/inventage-portal-helm/ --username $USER --password $PASSWORD")
        sh("helm repo add inventage-portal-helm-staging https://nexus3.inventage.com/repository/inventage-portal-helm-staging/ --username $USER --password $PASSWORD")
    }
}
